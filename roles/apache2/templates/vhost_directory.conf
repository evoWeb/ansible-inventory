{# Define default values here so the template below can just focus on layout #}

{%- set vals = {
    'interfaces': (vhost.interface | default('*')).split(),
    'port': vhost.port | default('443'),

    'ServerName': site_config.server_name,
    'ServerAlias': vhost.server_alias | default('www.{0} *.{0}'.format(site_config.server_name)),
    'ServerAdmin': vhost.server_admin | default('webmaster@{0}'.format(site_config.server_name)),

    'DirectoryIndex': vhost.directory_index,
    'UseCanonicalName': vhost.use_canonical_name,
    'AllowEncodedSlashes': vhost.allow_encoded_slashes | default('Off'),

    'LogLevel': vhost.log_level | default('warn'),
    'ErrorLog': vhost.error_log | default('{0}/{1}-error.log'.format(vhost.log_folder, site_config.server_name), true),
    'LogFormat': vhost.log_format | default('"%h %l %u %t \\\"%r\\\" %>s"'),
    'CustomLog': vhost.custom_log | default('{0}/{1}-access.log combined'.format(vhost.log_folder, site_config.server_name), true),

    'DocumentRoot': vhost.document_root | default('/var/www/html/{0}'.format(site_config.server_name)),
    'VirtualDocumentRoot': vhost.virtual_document_root,

    'Timeout': vhost.timeout | default(false),
    'LimitRequestFields': vhost.limit_request_fields | default(false),

    'SSLCertificateFile': vhost.ssl_certificate_file | default('/home/www/mkcert/www.{0}+1.pem'.format(site_config.server_name)),
    'SSLCertificateKeyFile': vhost.ssl_certificate_key_file | default('/home/www/mkcert/www.{0}+1-key.pem'.format(site_config.server_name)),
    'SSLCertificateChainFile': vhost.ssl_certificate_chain_file,

    'Directory_default': '/var/www/html/{0}'.format(site_config.server_name),
    'Directory': {
        'Options': '-Indexes +FollowSymLinks',
        'Order': 'allow,deny',
        'Allow': 'from all',
        'Require': 'all granted',
        'AllowOverride': 'None',
    },
    'Location': {
        'Order': 'allow,deny',
        'Allow': 'from all',
        'Require': 'all granted',
    },
} -%}

<VirtualHost {%- for intf in vals.interfaces %} {{intf}}:{{ vals.port }}{% endfor -%}>
    ServerName {{ vals.ServerName }}
    {% if vals.ServerAlias != False %}ServerAlias {{ vals.ServerAlias }}{% endif %}

    {% if vals.ServerAdmin != False %}ServerAdmin {{ vals.ServerAdmin }}{% endif %}


{% if vhost.directory_index | default(false) -%}    DirectoryIndex {{ vals.DirectoryIndex }}{% endif %}
{% if vhost.use_canonical_name | default(false) -%}    UseCanonicalName {{ vals.UseCanonicalName }}{% endif %}
{% if (vals.AllowEncodedSlashes) != False -%}    AllowEncodedSlashes {{ vals.AllowEncodedSlashes }}{% endif %}


    {% if vals.LogLevel != False -%}LogLevel {{ vals.LogLevel }}{% endif %}

    {% if vals.ErrorLog != False -%}ErrorLog {{ vals.ErrorLog }}{% endif %}

    {% if vals.LogFormat != False -%}LogFormat {{ vals.LogFormat }}{% endif %}

    {% if vals.CustomLog != False -%}CustomLog {{ vals.CustomLog }}{% endif %}

    {% if vals.DocumentRoot != False -%}DocumentRoot {{ vals.DocumentRoot }}htdocs/{% endif %}
    {% if vals.VirtualDocumentRoot | default(false) -%}VirtualDocumentRoot {{ vals.VirtualDocumentRoot }}htdocs/{% endif %}

    {% if vals.Timeout != False and vals.Timeout != None %}Timeout {{ vals.Timeout }}{% endif %}
    {% if vals.LimitRequestFields %}LimitRequestFields {{ vals.LimitRequestFields }}{% endif %}

    {% if vals.SSLCertificateFile | default(false) %}SSLEngine on
    SSLCertificateFile {{ vals.SSLCertificateFile }}
    SSLCertificateKeyFile {{ vals.SSLCertificateKeyFile }}
    {% if vals.SSLCertificateChainFile | default(false) %}SSLCertificateChainFile {{ vals.SSLCertificateChainFile }}{% endif %}
    {% endif %}

    {% if vhost.rewrite | default(false) %}RewriteEngine on
    {{ vhost.rewrite }}
    {%  endif %}

    {%- for loc, path in (vhost.alias | default({})).items() %}
    Alias {{ loc }} {{ path }}
    {%- endfor %}

    {%- set dvals = {
        'Options': vhost.directory_options.Options | default(vals.Directory.Options, true),
        'Order': vhost.directory_options.Order | default(vals.Directory.Order, true),
        'Allow': vhost.directory_options.Allow | default(vals.Directory.Allow, true),
        'Require': vhost.directory_options.Require | default(vals.Directory.Require, true),
        'AllowOverride': vhost.directory_options.AllowOverride | default(vals.Directory.AllowOverride, true),
        'Dav': vhost.directory_options.Dav | default(False, true),
    } %}

    <Directory "{{ vals.DocumentRoot }}">
        {% if dvals.get('Options') != False %}Options {{ dvals.Options }}{% endif %}

        {% if dvals.get('Require') != False %}Require {{dvals.Require}}{% endif %}

        {% if dvals.get('AllowOverride') != False %}AllowOverride {{ dvals.AllowOverride }}{% endif %}

        {% if dvals.get('Dav') != False %}Dav On{% endif %}

        # Enable URL rewriting
        RewriteEngine On

        # Store the current location in an environment variable CWD to use
        # mod_rewrite in .htaccess files without knowing the RewriteBase
        RewriteCond $0#%{REQUEST_URI} ([^#]*)#(.*)\1$
        RewriteRule ^.*$ - [E=CWD:%2]

        # Rules to set ApplicationContext based on hostname
        #RewriteCond %{HTTP_HOST} ^dev\.example\.com$
        #RewriteRule .? - [E=TYPO3_CONTEXT:Development]
        #RewriteCond %{HTTP_HOST} ^staging\.example\.com$
        #RewriteRule .? - [E=TYPO3_CONTEXT:Production/Staging]
        #RewriteCond %{HTTP_HOST} ^www\.example\.com$
        #RewriteRule .? - [E=TYPO3_CONTEXT:Production]

        # Rule for versioned static files, configured through:
        # - $GLOBALS['TYPO3_CONF_VARS']['BE']['versionNumberInFilename']
        # - $GLOBALS['TYPO3_CONF_VARS']['FE']['versionNumberInFilename']
        # IMPORTANT: This rule has to be the very first RewriteCond in order to work!
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.+)\.(\d+)\.(php|js|css|png|jpg|gif|gzip)$ %{ENV:CWD}$1.$3 [L]

        # Access block for folders
        RewriteRule _(?:recycler|temp)_/ - [F]
        RewriteRule fileadmin/templates/.*\.(?:txt|ts)$ - [F]
        RewriteRule ^(?:vendor|typo3_src|typo3temp/var) - [F]
        RewriteRule (?:typo3conf/ext|typo3/sysext|typo3/ext)/[^/]+/(?:Configuration|Resources/Private|Tests?|Documentation|docs?)/ - [F]

        # Block access to all hidden files and directories with the exception of
        # the visible content from within the `/.well-known/` hidden directory (RFC 5785).
        RewriteCond %{REQUEST_URI} "!(^|/)\.well-known/([^./]+./?)+$" [NC]
        RewriteCond %{SCRIPT_FILENAME} -d [OR]
        RewriteCond %{SCRIPT_FILENAME} -f
        RewriteRule (?:^|/)\. - [F]

        # Stop rewrite processing, if we are in the typo3/ directory or any other known directory
        # NOTE: Add your additional local storages here
        RewriteRule ^(?:typo3/|fileadmin/|typo3conf/|typo3temp/|uploads/|favicon\.ico) - [L]

        # If the file/symlink/directory does not exist => Redirect to index.php.
        # For httpd.conf, you need to prefix each '%{REQUEST_FILENAME}' with '%{DOCUMENT_ROOT}'.
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_FILENAME} !-l
        RewriteRule ^.*$ %{ENV:CWD}index.php [QSA,L]
    </Directory>

    {%- for path, loc in (vhost.location | default({})).items() %}
    {%- set lvals = {
        'Order': loc.get('Order', vals.Location.Order),
        'Allow': loc.get('Allow', vals.Location.Allow),
        'Require': loc.get('Require', vals.Location.Require),
        'Dav': loc.get('Dav', False),
    } %}

    <Location "{{ path }}">
        {%- if lvals.get('Order') != False %}Order {{ lvals.Order }}{% endif %}
        {%- if lvals.get('Allow') != False %}Allow {{ lvals.Allow }}{% endif %}
        {%- if lvals.get('Dav') != False %}Dav On{% endif %}

        {%- if loc.get('Formula_Append') %}
        {{ loc.Formula_Append|indent(8) }}
        {% endif %}
    </Location>
    {% endfor %}

    SetEnv TYPO3_CONTEXT {{ vhost.typo3_context }}
    {% if 'additional_config_file' in vhost %}SetEnv ADDITIONAL_CONFIG_FILE {{ vhost.additional_config_file }}{% endif %}

    <Directory ~ "\.(svn|git)">
        Order allow,deny
        Deny from all
    </Directory>

    <FilesMatch \.php$>
        SetHandler "proxy:unix:/run/php/{{ site_config.pool.version }}-fpm-{{ site_name }}.sock|fcgi://localhost"
    </FilesMatch>

    {%- if 'formula_append' in vhost and vhost.formula_append %}
    {{ vhost.formula_append | indent(4) }}
    {% endif %}

</VirtualHost>
